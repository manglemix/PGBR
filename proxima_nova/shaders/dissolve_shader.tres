[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://shaders/dissolve_noise_texture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=5]
constant = Color( 0.784555, 0.172754, 0.172754, 1 )

[sub_resource type="VisualShaderNodeInput" id=6]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled;

uniform sampler2D tex_frg_7;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// Input:3
	float n_out3p0 = TIME;

// ScalarFunc:4
	float n_out4p0 = sin(n_out3p0);

// ScalarOp:5
	float n_in5p1 = 2.00000;
	float n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_out5p0;

// ScalarFunc:9
	float n_out9p0 = round(n_out8p0);

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0 = n_out8p0 - n_in10p1;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0 = n_in11p0 - n_out10p0;

// ScalarFunc:12
	float n_out12p0 = round(n_out11p0);

// Color:14
	vec3 n_out14p0 = vec3(0.784555, 0.172754, 0.172754);
	float n_out14p1 = 1.000000;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out12p0) * n_out14p0;

// Output:0
	ALPHA = n_out9p0;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}
"
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 2320, 560 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -760, 500 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -1480, 920 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -1100, 920 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -700, 920 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -380, 480 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( 100, 800 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 500, 540 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 480, 1020 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 820, 1040 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 1240, 1020 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 1700, 1020 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 1300, 1440 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 5, 0, 2, 0, 7, 0, 7, 0, 8, 0, 8, 0, 9, 0, 5, 0, 8, 1, 9, 0, 0, 1, 8, 0, 10, 0, 10, 0, 11, 1, 11, 0, 12, 0, 12, 0, 13, 0, 14, 0, 13, 1, 13, 0, 0, 5 )

[resource]
shader = SubResource( 13 )
